---
name: Package Manager Matrix

on:
  workflow_dispatch:

jobs:
  npm-matrix:
    name: npm testing on ${{ matrix.os }} with Node ${{ matrix.node-version }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false  # Need results from all OS/Node.js combinations
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: ['18', '20', '22']  # Use specific versions without .x

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: priya-kinthali/setup-node@sample-686
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: 'sample-projects/basic-npm/package-lock.json'

      - name: Verify npm installation
        run: |
          node --version
          npm --version
          npm config list
      - name: Install dependencies with npm
        run: |
          cd sample-projects/basic-npm
          npm ci
      - name: Test npm scripts
        run: |
          cd sample-projects/basic-npm
          npm run test
          npm run build
      - name: Test npm package installation
        run: |
          cd sample-projects/basic-npm
          npm install --save-dev jest
          npm list jest
  yarn-matrix:
    name: yarn testing on ${{ matrix.os }} with Node ${{ matrix.node-version }}
    runs-on: ${{ matrix.os }}
  
    strategy:
      fail-fast: false  # Need results from all OS/Node.js combinations
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: ['18', '20', '22']  # Use specific versions without .x
  
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Enable Corepack
        run: corepack enable
          
      - name: Install Yarn via Corepack
        working-directory: sample-projects/typescript-yarn
        run: corepack install
  
      - name: Verify yarn installation
        run: |
          node --version
          yarn --version
  
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: priya-kinthali/setup-node@sample-686
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'
          cache-dependency-path: 'sample-projects/typescript-yarn/yarn.lock'
  
      - name: Generate or update yarn.lock if needed
        working-directory: sample-projects/typescript-yarn
        run: |
          if [ ! -f yarn.lock ]; then
            echo "No yarn.lock found, generating..."
            yarn install
          else
            echo "yarn.lock exists, checking compatibility..."
            # Try to install with immutable first, fallback to regular install if needed
            yarn install --immutable || yarn install
          fi
        shell: bash
        
      - name: Install dependencies with yarn (first run - cache miss expected)
        working-directory: sample-projects/typescript-yarn
        run: |
          echo "=== First installation (cache miss expected) ==="
          time yarn install --immutable
        shell: bash
  
      - name: Build TypeScript project
        working-directory: sample-projects/typescript-yarn
        run: |
          echo "=== Building TypeScript project ==="
          yarn build
        shell: bash
  
      - name: Run tests
        working-directory: sample-projects/typescript-yarn
        run: |
          echo "=== Running tests ==="
          yarn test
        shell: bash
  
      - name: Test TypeScript compilation (type checking)
        working-directory: sample-projects/typescript-yarn
        run: |
          echo "=== TypeScript type checking ==="
          yarn tsc --noEmit
        shell: bash
  
      - name: Clear and reinstall (test cache effectiveness)
        working-directory: sample-projects/typescript-yarn
        run: |
          rm -rf node_modules
          echo "=== Second installation (cache hit expected) ==="
          time yarn install --immutable
        shell: bash
  
      - name: Verify cache effectiveness
        working-directory: sample-projects/typescript-yarn
        run: |
          echo "=== Yarn cache information ==="
          yarn config get cacheFolder
          echo "=== Installation completed successfully ==="
        shell: bash
  pnpm-matrix:
    name: pnpm testing on ${{ matrix.os }} with Node ${{ matrix.node-version }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false  # Need results from all OS/Node.js combinations
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: ['18', '20', '22']  # Use specific versions without .x

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Verify pnpm installation
        run: |
          node --version
          pnpm --version
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: priya-kinthali/setup-node@sample-686
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'
          cache-dependency-path: 'sample-projects/esm-pnpm/pnpm-lock.yaml'


      - name: Install dependencies with pnpm
        run: |
          cd sample-projects/esm-pnpm
          pnpm install --frozen-lockfile
      - name: Test pnpm scripts
        run: |
          cd sample-projects/esm-pnpm
          pnpm test
          pnpm build
      - name: Test ESM functionality
        run: |
          cd sample-projects/esm-pnpm
          pnpm start
  package-manager-comparison:
    name: Package manager feature comparison
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: priya-kinthali/setup-node@sample-686
        with:
          node-version: '20'  # Use specific version without .x

      - name: Install package managers
        run: |
          npm install -g yarn pnpm
          echo "Package manager versions:"
          npm --version
          yarn --version
          pnpm --version
      - name: Test npm lockfile handling
        run: |
          cd sample-projects/basic-npm
          rm -f package-lock.json
          npm install
          echo "npm lockfile created:"
          ls -la package-lock.json
      - name: Test yarn lockfile handling
        run: |
          cd sample-projects/typescript-yarn
          rm -f yarn.lock
          yarn install
          echo "yarn lockfile created:"
          ls -la yarn.lock
      - name: Test pnpm lockfile handling
        run: |
          cd sample-projects/esm-pnpm
          rm -f pnpm-lock.yaml
          pnpm install
          echo "pnpm lockfile created:"
          ls -la pnpm-lock.yaml
      - name: Compare installation speed
        run: |
          echo "Comparing package manager installation speeds..."
          echo "npm install speed:"
          cd sample-projects/basic-npm
          rm -rf node_modules
          time npm ci
          echo "yarn install speed:"
          cd ../typescript-yarn
          rm -rf node_modules
          time yarn install --frozen-lockfile
          echo "pnpm install speed:"
          cd ../esm-pnpm
          rm -rf node_modules
          time pnpm install --frozen-lockfile
  workspace-monorepo-test:
    name: Test monorepo workspace functionality
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: priya-kinthali/setup-node@sample-686
        with:
          node-version: '20'  # Use specific version without .x
          cache: 'npm'
          cache-dependency-path: 'sample-projects/monorepo/package-lock.json'

      - name: Install dependencies for monorepo
        run: |
          cd sample-projects/monorepo
          npm ci
      - name: Test workspace packages
        run: |
          cd sample-projects/monorepo
          npm run test --workspace=package-a
          npm run test --workspace=package-b
          npm run build --workspaces
      - name: Test cross-package dependencies
        run: |
          cd sample-projects/monorepo
          npm run start --workspace=package-b
  registry-authentication:
    name: Test package registry configurations
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Test npm registry configuration
        uses: priya-kinthali/setup-node@sample-686
        with:
          node-version: '20'  # Use specific version without .x
          registry-url: 'https://registry.npmjs.org/'

      - name: Verify npm registry
        run: |
          npm config get registry
          echo "Registry configuration verified"
      - name: Test scoped registry configuration
        uses: priya-kinthali/setup-node@sample-686
        with:
          node-version: '20'  # Use specific version without .x
          registry-url: 'https://npm.pkg.github.com'
          scope: '@octocat'

      - name: Verify scoped registry
        run: |
          npm config get @octocat:registry
          echo "Scoped registry configuration verified"
  package-resolution:
    name: Test package resolution strategies
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: priya-kinthali/setup-node@sample-686
        with:
          node-version: '20'  # Use specific version without .x

      - name: Install package managers
        run: |
          npm install -g yarn pnpm
      
      - name: Install dependencies (npm)
        run: |
          cd sample-projects/basic-npm
          npm install

      - name: Test npm resolution
        run: |
          cd sample-projects/basic-npm
          npm ls
          npm explain lodash

      - name: Install dependencies (yarn)
        run: |
          cd sample-projects/typescript-yarn
          yarn install

      - name: Test yarn resolution
        run: |
          cd sample-projects/typescript-yarn
          yarn list
          yarn why typescript

      - name: Install dependencies (pnpm)
        run: |
          cd sample-projects/esm-pnpm
          pnpm install

      - name: Test pnpm resolution
        run: |
          cd sample-projects/esm-pnpm
          pnpm list
          pnpm why lodash
